/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import { containsBytes, getU8Encoder, type Address } from '@solana/web3.js';
import {
  type ParsedCreateInstruction,
  type ParsedIncrementInstruction,
} from '../instructions';
import { Key, getKeyEncoder } from '../types';

export const SPL302_PROGRAM_ADDRESS =
  'KMG79tAuQD5HMDRuUucpj57YoArvKgu8xazytRDNmTE' as Address<'KMG79tAuQD5HMDRuUucpj57YoArvKgu8xazytRDNmTE'>;

export enum Spl302Account {
  Counter,
}

export function identifySpl302Account(
  account: { data: Uint8Array } | Uint8Array
): Spl302Account {
  const data = account instanceof Uint8Array ? account : account.data;
  if (containsBytes(data, getKeyEncoder().encode(Key.Counter), 0)) {
    return Spl302Account.Counter;
  }
  throw new Error(
    'The provided account could not be identified as a spl302 account.'
  );
}

export enum Spl302Instruction {
  Create,
  Increment,
}

export function identifySpl302Instruction(
  instruction: { data: Uint8Array } | Uint8Array
): Spl302Instruction {
  const data =
    instruction instanceof Uint8Array ? instruction : instruction.data;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return Spl302Instruction.Create;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return Spl302Instruction.Increment;
  }
  throw new Error(
    'The provided instruction could not be identified as a spl302 instruction.'
  );
}

export type ParsedSpl302Instruction<
  TProgram extends string = 'KMG79tAuQD5HMDRuUucpj57YoArvKgu8xazytRDNmTE',
> =
  | ({
      instructionType: Spl302Instruction.Create;
    } & ParsedCreateInstruction<TProgram>)
  | ({
      instructionType: Spl302Instruction.Increment;
    } & ParsedIncrementInstruction<TProgram>);
