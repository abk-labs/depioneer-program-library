/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { SHARE_POOL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export type CreatePoolInstruction<
  TProgram extends string = typeof SHARE_POOL_PROGRAM_ADDRESS,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountCollectionNft extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountCollectionNft extends string
        ? ReadonlyAccount<TAccountCollectionNft>
        : TAccountCollectionNft,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreatePoolInstructionData = {
  discriminator: number;
  sharesPerToken: bigint;
};

export type CreatePoolInstructionDataArgs = { sharesPerToken: number | bigint };

export function getCreatePoolInstructionDataEncoder(): Encoder<CreatePoolInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['sharesPerToken', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: 0 })
  );
}

export function getCreatePoolInstructionDataDecoder(): Decoder<CreatePoolInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['sharesPerToken', getU64Decoder()],
  ]);
}

export function getCreatePoolInstructionDataCodec(): Codec<
  CreatePoolInstructionDataArgs,
  CreatePoolInstructionData
> {
  return combineCodec(
    getCreatePoolInstructionDataEncoder(),
    getCreatePoolInstructionDataDecoder()
  );
}

export type CreatePoolInput<
  TAccountPool extends string = string,
  TAccountCollectionNft extends string = string,
  TAccountAuthority extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** Pool account to create (seeds: ['pool', collection_nft]) */
  pool: Address<TAccountPool>;
  /** Collection NFT Metadata account */
  collectionNft: Address<TAccountCollectionNft>;
  /** Authority account */
  authority: TransactionSigner<TAccountAuthority>;
  /** Payer account */
  payer: TransactionSigner<TAccountPayer>;
  /** System program account */
  systemProgram?: Address<TAccountSystemProgram>;
  sharesPerToken: CreatePoolInstructionDataArgs['sharesPerToken'];
};

export function getCreatePoolInstruction<
  TAccountPool extends string,
  TAccountCollectionNft extends string,
  TAccountAuthority extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
>(
  input: CreatePoolInput<
    TAccountPool,
    TAccountCollectionNft,
    TAccountAuthority,
    TAccountPayer,
    TAccountSystemProgram
  >
): CreatePoolInstruction<
  typeof SHARE_POOL_PROGRAM_ADDRESS,
  TAccountPool,
  TAccountCollectionNft,
  TAccountAuthority,
  TAccountPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = SHARE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pool: { value: input.pool ?? null, isWritable: true },
    collectionNft: { value: input.collectionNft ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.collectionNft),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreatePoolInstructionDataEncoder().encode(
      args as CreatePoolInstructionDataArgs
    ),
  } as CreatePoolInstruction<
    typeof SHARE_POOL_PROGRAM_ADDRESS,
    TAccountPool,
    TAccountCollectionNft,
    TAccountAuthority,
    TAccountPayer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCreatePoolInstruction<
  TProgram extends string = typeof SHARE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Pool account to create (seeds: ['pool', collection_nft]) */
    pool: TAccountMetas[0];
    /** Collection NFT Metadata account */
    collectionNft: TAccountMetas[1];
    /** Authority account */
    authority: TAccountMetas[2];
    /** Payer account */
    payer: TAccountMetas[3];
    /** System program account */
    systemProgram: TAccountMetas[4];
  };
  data: CreatePoolInstructionData;
};

export function parseCreatePoolInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCreatePoolInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      pool: getNextAccount(),
      collectionNft: getNextAccount(),
      authority: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreatePoolInstructionDataDecoder().decode(instruction.data),
  };
}
